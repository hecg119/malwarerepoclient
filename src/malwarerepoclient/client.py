import hashlib
import io
import os
import random
import shutil

import requests


DEFAULT_REPO_URL = 'http://localhost:5000'
MALWARE_PATH = ''

from requests import Session
from urllib.parse import urljoin

class LiveServerSession(Session):
    def __init__(self, prefix_url=None, *args, **kwargs):
        super(LiveServerSession, self).__init__(*args, **kwargs)
        self.prefix_url = prefix_url

    def request(self, method, url, *args, **kwargs):
        url = urljoin(self.prefix_url, url)
        return super(LiveServerSession, self).request(method, url, *args, **kwargs)


def requests_download_file(url, hash, dest_dir):
    r = requests.get(url, stream=True)
    if dest_dir is None:
        b = io.BytesIO()
        shutil.copyfileobj(r.raw, b)
        return b.getvalue()

    with open(os.path.join(dest_dir, hash), 'wb') as f:
        shutil.copyfileobj(r.raw, f)
    return os.path.join(dest_dir, hash)



# todo define base class with not-implemented
class RepoClientBase():

    def __init__(self,client=None):
        pass

    def get_random_file(self,malicious_filter):
        return generate_local_metadata(b'yolo',True)

    def generate_local_metadata(file_content, malicious):
        hash = hashlib.sha256(file_content).hexdigest()
        md5 = hashlib.md5(file_content).hexdigest()
        return {"file_name": hash, "hash": hash, "malicious": malicious, "md5": md5}


class CustomMalwareRepoClient(RepoClientBase):
    def __init__(self,loc):
        self.loc = loc
    def get_random_file(self,loc,malicious_filter=True):
        MALWARE_PATH=os.path.abspath(self.loc)

        for filename in os.listdir(MALWARE_PATH):
            if os.path.isfile(os.path.join(MALWARE_PATH,filename)):
                with open(os.path.join(MALWARE_PATH,filename),mode='rb') as f:
                    filebytes = f.read()
                    return generate_local_metadata(filebytes,malicious_filter)


class DummyMalwareRepoClient(RepoClientBase):

    eicar_b = b'X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'
    no_eicar_b = b'not a malicious file'

    def __init__(self, client=None):
        pass

    def get_random_file(self, malicious_filter=True):
        if malicious_filter:
            return generate_local_metadata(self.eicar_b, malicious_filter), self.eicar_b
        return generate_local_metadata(self.no_eicar_b, malicious_filter), self.no_eicar_b

class PolySwarmMalwareRepoClient(RepoClientBase):

    def __init__(self, client=None):
        self.client = LiveServerSession(prefix_url=os.environ.get("POLYSWARM_MALWARE_REPO_URL", DEFAULT_REPO_URL)) if client is None else client


    def get_file(self, hash, md_cache=None, dest_dir=None):
        md = self._get_md_via_hash(hash) if md_cache is None else md_cache
        download_url_signed = md['url']

        fobj = requests_download_file(download_url_signed, hash, dest_dir)

        return md, fobj

    def _get_md_via_hash(self, hash):
        return self.client.get('/api/malware/{0}'.format(hash)).json

    def is_malicious(self, hash):
        return self._get_md_via_hash(hash)['malicious']

    def get_random_file(self, dest_dir=None, malicious_filter=None, seed=None):
        #TODO make this serverside when DB gets bigger
        #TODO add arbitrary selection for files based on metadata, do serverside

        l = self.client.get('/api/malware/').json
        md = l if isinstance(l, list) else l()

        if malicious_filter is not None:
            md = list(filter(lambda x: x.get('malicious', False) == malicious_filter, md))

        if seed:
            # make this deterministic
            random.seed(seed)

        ch = random.choice(md)

        return self.get_file(ch['hash'], md_cache=ch, dest_dir=dest_dir)